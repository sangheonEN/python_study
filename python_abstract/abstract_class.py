"""
추상화 정의: **복잡한 기능을 숨기고 주요 기능에만 집중할 수 있게 해주는 개념**입니다. 추상화를 통해 객체들 간의 공통된 특성을 추출하여 추상 클래스로 정의함으로써 코드의 재사용성과 유지보수성을 향상한다.

추상 클래스: 일반적으로 부모 클래스의 역할로 자식 클래스들에게 상속되어지는 역할. 추상 클래스(부모 클래스)에서 추상 메서드를 정의해서 자식 클래스에서 상속하여 추상 메서드명을 그대로 활용해서 자식 클래스에 맞게 코드를 수정하여 쓸 수 있음. 이렇게 되면, 각기 다른 자식 클래스에서 추상 클래스를 상속하여 각기 다른 자식 클래스 별로 같은 추상 메서드 명으로 커스텀하게 코드를 구현할 수 있다. 

추상 메서드: 추상 클래스 안에서 pass만을 코드로 가져 구현되진 않지만, 자식 클래스에서 추상 클래스를 상속하여 추상 메서드를 활용하여 자식 클래스에서 커스텀하게 구현할 수 있음.

"""

# 추상 클래스
class Shape:
	def __init__(self, x, y):
		self.x = x
		self.y = y
	
	# 추상 메서드
	def area(self):
		pass

class Circle(Shape):
	def __init__(self, x, y, r):
		# super를 사용하여 부모 클래스의 init 파라미터에 데이터 전달
		super().__init__(x, y)
		self.r = r
	
	# 추상 클래스(부모 클래스)의 추상 메서드인 area를 활용하여 Circle 자식 클래스만의 area 계산 함수를 구현함.
	def area(self):
		return 3.14 * self.r ** 2
	

cir = Circle(2, 2, 3) # x = 2, y = 2, r = 3
print(f"원 면적 계산 결과: {cir.area()}")